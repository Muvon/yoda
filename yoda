#!/usr/bin/env bash
set -e
YODA_CMD='yoda'
YODA_SOURCE_VERSION='1.2'
# YODA_VERSION redefined when you are in project dir
YODA_VERSION=$YODA_SOURCE_VERSION
YODA_BIN=$(test -h $0 && readlink $0 || echo $0)
YODA_PATH=${YODA_BIN%/*}

export YODA_CMD YODA_SOURCE_VERSION YODA_VERSION YODA_BIN YODA_PATH

# Colored output support
# shellcheck source=lib/color.sh
source $YODA_PATH/lib/color.sh

# Forbid to run as root
if [[ "$(id -u)" -eq 0 ]]; then
  >&2 echo "You are not allowed to run Yoda as root."
  exit 1
fi

if [[ -z "$1" ]]; then
  >&2 echo "No command specified. Run '$YODA_CMD command'. '$YODA_CMD help' for more info." && exit 1
fi
cmd=$1
shift

# Auto version switch and update
yodarc_file=$(ls */.yodarc 2>/dev/null || true)
if [[ -n "$yodarc_file" ]]; then
  # shellcheck source=yoda/.yodarc
  source $yodarc_file
fi

if [[ "$YODA_SOURCE_VERSION" != "$YODA_VERSION" && $cmd != upgrade ]]; then
  (
    set +e
    echo "Current Yoda version: '$YODA_SOURCE_VERSION'."
    echo "Switching to project Yoda version: '$YODA_VERSION'."
    cd $YODA_PATH
    git fetch
    git pull --rebase origin master
    git checkout $YODA_VERSION
    switched_version=$(grep "YODA_VERSION=$YODA_VERSION" $YODA_BIN)
    if [[ "$switched_version" == "$YODA_VERSION" ]]; then
      exec $YODA_BIN $cmd "$@"
    else
      >&2 echo "Failed to switch version to '$YODA_VERSION'. Using '$YODA_SOURCE_VERSION'."
    fi
  )2> /dev/null
fi

# shellcheck source=docker/env.sh
test -e $DOCKER_ROOT/env.sh && source $_

# shellcheck source=docker/env.dev.sh
test -e $DOCKER_ROOT/env.$ENV.sh && source $_

for p in "$@"; do
  case $p in
    *)
      ;;
  esac
done

# Use custom start layout if there is start file
custom_run() {
  script=$1
  shift

  # Stop recursion here get parent caller
  called_by=$(ps -o command -p $PPID | tail -n 1 | cut -d' ' -f2)
  if [[ "$called_by" == "$DOCKER_ROOT/$script" ]]; then
    return 0
  fi

  if [[ -e $DOCKER_ROOT/$script && ! -x $DOCKER_ROOT/$script ]]; then
    >&2 echo "$DOCKER_ROOT/$script is found but its not executable. Run 'chmod +x $DOCKER_ROOT/$script' to make it work."
    return 1
  fi

  if [[ -x $DOCKER_ROOT/$script ]]; then
    exec $DOCKER_ROOT/$script "$@"
    exit 0
  fi
}

allow_dev_only() {
  if [[ $ENV != 'dev' ]]; then
    >&2 echo "Your environment: $ENV. This command is allowed only in 'dev' environment."
    return 1
  fi
}

check_yodarc() {
  if [[ ! -f $DOCKER_ROOT/.yodarc ]]; then
    >&2 echo "Yoda is not inited. Run '$YODA_CMD init' first. More info: '$YODA_CMD help'."
    return 1
  fi
}

case "$cmd" in
  init)
    bash "$YODA_PATH/src/init.sh" "$@"
    ;;

  upgrade)
    check_yodarc
    allow_dev_only
    bash "$YODA_PATH/src/upgrade.sh" "$YODA_PATH/upgrades"
    ;;

  add|delete)
    check_yodarc
    allow_dev_only

    arg_name="$*"
    if [[ -z "$arg_name" ]]; then
      >&2 echo "Did you mean '$YODA_CMD $cmd container'? '$YODA_CMD help' for more info."
      exit 1
    fi

    for name in $arg_name; do
      bash "$YODA_PATH/src/$cmd.sh" "$name"
    done
    ;;

  compose)
    check_yodarc
    arg_composer="$*"
    custom_run compose
    # Get containers to build
    containers=$(grep ^$ENV: $DOCKER_ROOT/Envfile | cut -d ':' -f2)
    COMPOSE_SCRIPT=$arg_composer bash "$YODA_PATH/src/compose.sh" $containers
    ;;

  build)
    check_yodarc
    custom_run build "$@"
    bash "$YODA_PATH/src/build.sh" "$@"
    ;;

  start)
    check_yodarc
    custom_run start "$@"
    bash "$YODA_PATH/src/start.sh" "$@"
    ;;

  stop)
    check_yodarc
    custom_run stop "$@"
    bash "$YODA_PATH/src/stop.sh" "$@"
    ;;

  destroy)
    check_yodarc
    custom_run destroy
    bash "$YODA_PATH/src/destroy.sh"
    ;;

  status)
    check_yodarc
    bash "$YODA_PATH/src/status.sh"
    ;;

  log)
    check_yodarc
    bash "$YODA_PATH/src/log.sh" "$@"
    ;;

  logs)
    $YODA_CMD log "$@"
    ;;

  deploy)
    check_yodarc
    if [[ -z "$GIT_URL" ]]; then
      >&2 echo "GIT_URL is empty. Are you sure you are in git repository?"
      exit 1
    fi

    custom_run deploy "$@"
    bash "$YODA_PATH/src/deploy.sh" "$@"
    ;;

  rollback)
    check_yodarc
    bash "$YODA_PATH/src/rollback.sh" "$@"
    ;;

  help)
    bash "$YODA_PATH/src/help.sh"
    ;;

  version)
    echo "Yoda version: $YODA_VERSION"
    ;;

  *)
    >&2 echo "Unknown command '$cmd'"
    >&2 echo "Run '$YODA_CMD help' to see more info"
    ;;
esac
